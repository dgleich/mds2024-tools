import csv
import yaml
import sys 
import click 
import os 
from datetime import datetime

import requests
from bs4 import BeautifulSoup

### The goal of this program is to read the schedule from the SIAM webpage
### and save it to a file we can load into Julia. 

def debug_print(msg, fg="white", debugheader="DEBUG: "):
  global DEBUG
  if DEBUG:
    click.echo(click.style(debugheader + msg, fg=fg))


schedule_url = 'https://meetings.siam.org/program.cfm?CONFCODE=mds24'

poster_urls = [
  'https://meetings.siam.org/sess/dsp_programsess.cfm?SESSIONCODE=80900',
  'https://meetings.siam.org/sess/dsp_programsess.cfm?SESSIONCODE=80905',
  'https://meetings.siam.org/sess/dsp_programsess.cfm?SESSIONCODE=80906',
  'https://meetings.siam.org/sess/dsp_programsess.cfm?SESSIONCODE=80907',
  'https://meetings.siam.org/sess/dsp_programsess.cfm?SESSIONCODE=80908'
]  


def get_schedule(): 
  response = requests.get(schedule_url)
  html_content = response.text

  soup = BeautifulSoup(html_content, 'html.parser')

  groups = [] 
  current_group = None 

  rows = soup.find_all('tr')

  for row in rows:
    time_cell = row.find('td', valign='top')
    if time_cell:
      time_text = time_cell.get_text(strip=True)
      if 'Concurrent Sessions' in time_text:
        if '9:00' in time_text or '3:10' in time_text: 
          # now we have a new group... 
          if current_group is not None:
            groups.append(current_group)
          current_group = []   
        else: # then we have some other session, so stop the curent group. 
          if current_group is not None:
            groups.append(current_group)
          current_group = None    
      elif 'AM' in time_text or 'PM' in time_text: 
        # then this is another schedule entry... 
        if current_group is not None:
          groups.append(current_group)
        current_group = None    
        

    if current_group is not None:
      link_cells = row.find_all('a', href=True)
      for link_cell in link_cells:
        href = link_cell['href']
        if 'SESSIONCODE' in href:
          session_code = href.split('SESSIONCODE=')[1]
          current_group.append(session_code)

  if current_group is not None:
    groups.append(current_group)

  return groups

def get_poster_ids(url):
  response = requests.get(url)
  soup = BeautifulSoup(response.text, 'html.parser')

  talk_ids = []
  links = soup.find_all('a', href=True)
  
  for link in links:
    href = link['href']
    if 'dsp_talk.cfm?p=' in href:
      talk_id = href.split('dsp_talk.cfm?p=')[1]
      talk_ids.append(talk_id)

  return talk_ids  


  
def write_schedule(groups, postersessions, filename):
  with open(filename, 'w') as f:
    f.write("# This file was generated by get-schedule.py\n\n")
    f.write('minisessions = [\n')
    for group in groups:
      f.write('  [')
      for session in group:
        f.write(f'{session}, ')
      f.write('],\n')
    f.write(']\n\n')
    
    f.write('postersessions = [\n')
    for postersession in postersessions:
      f.write('  [')
      for poster in postersession:
        f.write(f'{poster}, ')
      f.write('],\n')
    f.write(']\n\n')

def schedule_filename():
  current_date = datetime.now().strftime("%Y-%m-%d")
  filename = f"schedule-{current_date}.jl"
  return filename


def main(): 
  groups = get_schedule()
  postersessions = [] 
  for poster_url in poster_urls:
    poster_ids = get_poster_ids(poster_url)
    postersessions.append(poster_ids)

  write_schedule(groups, postersessions, schedule_filename())

if __name__ == '__main__':
  main()  